<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bossy on Mithi&#39;s Robotics Blog</title>
    <link>https://mithi.github.io/robotics-blog/tags/bossy/</link>
    <description>Recent content in bossy on Mithi&#39;s Robotics Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>ðŸ‘¾ðŸ¤– Mithi</copyright>
    <lastBuildDate>Sun, 29 Mar 2020 16:30:58 +0800</lastBuildDate>
    
	<atom:link href="https://mithi.github.io/robotics-blog/tags/bossy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ðŸŽ® Bossy Hiatus</title>
      <link>https://mithi.github.io/robotics-blog/blog/bossy/16-hiatus/</link>
      <pubDate>Sun, 29 Mar 2020 16:30:58 +0800</pubDate>
      
      <guid>https://mithi.github.io/robotics-blog/blog/bossy/16-hiatus/</guid>
      <description>I&amp;rsquo;ll be taking a little time away from Bossy. I have many features in store for it but right now because of the extreme lockdown in my city, I&amp;rsquo;m unable to get the parts I need for the second prototype.</description>
    </item>
    
    <item>
      <title>ðŸŽ® Bossy Code: Cleaner Code</title>
      <link>https://mithi.github.io/robotics-blog/blog/bossy/15-coding-6/</link>
      <pubDate>Sun, 29 Mar 2020 16:11:05 +0800</pubDate>
      
      <guid>https://mithi.github.io/robotics-blog/blog/bossy/15-coding-6/</guid>
      <description>View bossy&amp;rsquo;s working code: ðŸŽ® here
 Using namespaces and separating concerns!
I started implementing namespaces as I noticed that some of names the constants I defined are a bit too generic.
Here&amp;rsquo;s a good quick article by Lucky Resistor about implementing namespaces in Arduino 2014-Oct-31 | Lucky Resistor: How and Why to use Namespaces
I also noticed that I&amp;rsquo;m using some structs I defined for helping toggle the pixels of the LED Matrix, only to iterate over the input ids of a specific type of input (button, potentiometer, switches), so decided make arrays containing just the input ids so we can do this without being tied to functionalities we don&amp;rsquo;t use.</description>
    </item>
    
    <item>
      <title>ðŸŽ® Bossy Wireless! </title>
      <link>https://mithi.github.io/robotics-blog/blog/bossy/13-coding-5/</link>
      <pubDate>Sat, 28 Mar 2020 22:46:30 +0800</pubDate>
      
      <guid>https://mithi.github.io/robotics-blog/blog/bossy/13-coding-5/</guid>
      <description>View bossy&amp;rsquo;s working code: ðŸŽ® here
 Finally I&amp;rsquo;ve managed to test detected changes form Bossy to another microcontroller with a NRF24L01 module.
Everytime Bossy detects a change made by the user handling the controller it updates the LED Matrix appropriately and sends a two-byte message. One byte contains the input idea (a number between 0 and 24 since there&amp;rsquo;s 25 input channel total) and the other byte contains either the state (a number on a scale of 0 to 4) or a low resolution version of the raw reading (IE the reading scaled to a number between 0 and 255).</description>
    </item>
    
    <item>
      <title>ðŸŽ® Bossy Matrix: Feedback Test with LEDs</title>
      <link>https://mithi.github.io/robotics-blog/blog/bossy/12-coding-4/</link>
      <pubDate>Sat, 28 Mar 2020 01:43:49 +0800</pubDate>
      
      <guid>https://mithi.github.io/robotics-blog/blog/bossy/12-coding-4/</guid>
      <description>View bossy&amp;rsquo;s working code: ðŸŽ® here
 The next I needed to do is to provide feedback to the user that her input is indeed registered. We have the LED matrix for this.
The code for this sketch when compiled in the Arduino Micro:
Sketch uses 12844 bytes (44%) of program storage space. Maximum is 28672 bytes. Global variables use 780 bytes (30%) of dynamic memory, leaving 1780 bytes for local variables.</description>
    </item>
    
    <item>
      <title>ðŸŽ® Bossy Inputs: Feedback Test with Serial</title>
      <link>https://mithi.github.io/robotics-blog/blog/bossy/11-coding-3/</link>
      <pubDate>Fri, 27 Mar 2020 01:01:40 +0800</pubDate>
      
      <guid>https://mithi.github.io/robotics-blog/blog/bossy/11-coding-3/</guid>
      <description>View bossy&amp;rsquo;s working code: ðŸŽ® here
 So far, when the particular example sketch bossy_serial.ino is compiled in the Arduino Micro
Sketch uses 7726 bytes (26%) of program storage space. Maximum is 28672 bytes. Global variables use 528 bytes (20%) of dynamic memory, leaving 2032 bytes for local variables. Maximum is 2560 bytes. When compiled in the Arduino Uno
Sketch uses 5564 bytes (17%) of program storage space. Maximum is 32256 bytes.</description>
    </item>
    
    <item>
      <title>ðŸŽ® Bossy Inputs: Modifiable Constants</title>
      <link>https://mithi.github.io/robotics-blog/blog/bossy/10-coding-2/</link>
      <pubDate>Fri, 27 Mar 2020 00:36:52 +0800</pubDate>
      
      <guid>https://mithi.github.io/robotics-blog/blog/bossy/10-coding-2/</guid>
      <description>View bossy&amp;rsquo;s working code: ðŸŽ® here
 IMPORTANT QUICK SIDETRACK: Debouncing Buttons Before continuing with the code discussion, I just want to put this here: As I&amp;rsquo;ve mentioned in previous blog posts, I realized that there is no built-in pullup or pulldown resistor for the joystick select buttons. So when it is not pressed it&amp;rsquo;s just dangling in the air.
I hacked away this problem through software through temporary methods isBrokenButton() and _updateBrokenButton() methods.</description>
    </item>
    
    <item>
      <title>ðŸŽ® Bossy Inputs: How to Use</title>
      <link>https://mithi.github.io/robotics-blog/blog/bossy/09-coding-1/</link>
      <pubDate>Thu, 26 Mar 2020 23:38:51 +0800</pubDate>
      
      <guid>https://mithi.github.io/robotics-blog/blog/bossy/09-coding-1/</guid>
      <description>View bossy&amp;rsquo;s working code: ðŸŽ® here
 I have managed to read a couple of articles on object-oriented arduino to help me brainstorm on how I&amp;rsquo;d structure my code. There are many ways to go about it, but ultimately, here&amp;rsquo;s how I ended up doing it. I prioritized readability over taxonomy, so it might not be the most decoubled code with a bunch of small classes, but for my purpose I believe this will do.</description>
    </item>
    
    <item>
      <title>ðŸŽ® Bossy: Led Matrix Test</title>
      <link>https://mithi.github.io/robotics-blog/blog/bossy/08-led-matrix/</link>
      <pubDate>Wed, 25 Mar 2020 16:28:14 +0800</pubDate>
      
      <guid>https://mithi.github.io/robotics-blog/blog/bossy/08-led-matrix/</guid>
      <description>IMPORTANT: I needed to put a 1500 uF capacitor in between 5V and GND of the Arduino Micro, as the current drawn from the Arduino by itself was insufficient to power the LED Matrix along with everything.
         back view side view    I used the example code from Adafruit to test if the LED Matrix is working and that everything is hooked up properly.</description>
    </item>
    
    <item>
      <title>ðŸŽ® Bossy: Multiplexer Test 2</title>
      <link>https://mithi.github.io/robotics-blog/blog/bossy/07-multiplexer-2/</link>
      <pubDate>Tue, 24 Mar 2020 21:09:36 +0800</pubDate>
      
      <guid>https://mithi.github.io/robotics-blog/blog/bossy/07-multiplexer-2/</guid>
      <description>I hooked everything up to the multiplexers and it was really difficult, not only because of the soldering iron tip at hand, but also because I don&amp;rsquo;t have much available wires left. I cut six differently colored dupont cables and soldered the stranded wires which I hooked up to the multiplexer. It&amp;rsquo;s a bit delicate as of the moment. Might fix this to be more sturdy, maybe in the future.</description>
    </item>
    
    <item>
      <title>ðŸŽ® Bossy: Soldered Components</title>
      <link>https://mithi.github.io/robotics-blog/blog/bossy/06-soldered-components/</link>
      <pubDate>Sun, 22 Mar 2020 15:42:37 +0800</pubDate>
      
      <guid>https://mithi.github.io/robotics-blog/blog/bossy/06-soldered-components/</guid>
      <description>Note to self: Invest in a good soldering iron. Currently I only have a cordless AA-powered Hakko soldering iron, which is great, until after 15 minutes, it isn&amp;rsquo;t, and you have to change the battery, it gets expensive fast.
I can&amp;rsquo;t buy right now having the extreme quarantine due to covid19, so I borrowed from a neighbor from the other floor. It heats up nicely but tip was really bad. The picture on the left are the soldering tips, the most right soldering tip is mine, the other two is from what I borrowed.</description>
    </item>
    
    <item>
      <title>ðŸŽ® Bossy: Multiplexer Test</title>
      <link>https://mithi.github.io/robotics-blog/blog/bossy/05-multiplexer-test/</link>
      <pubDate>Sun, 22 Mar 2020 14:28:34 +0800</pubDate>
      
      <guid>https://mithi.github.io/robotics-blog/blog/bossy/05-multiplexer-test/</guid>
      <description>I tested the multiplexers if they&amp;rsquo;re working. To save time, I only tested two channels for each multiplexer, channel 0, and 15.
I used two potentiometers which I connect randomly at channel 0 or channel 15 of multiplexer 1 or multiplexer 2 (four possibilities). I also randomly pull the remaining two channels either down to ground or up to 5 volts.
Then I check the Serial monitor if it behaves the way I expect.</description>
    </item>
    
    <item>
      <title>ðŸŽ® Bossy: Wireless Test</title>
      <link>https://mithi.github.io/robotics-blog/blog/bossy/04-wireless-test/</link>
      <pubDate>Fri, 20 Mar 2020 20:50:00 +0800</pubDate>
      
      <guid>https://mithi.github.io/robotics-blog/blog/bossy/04-wireless-test/</guid>
      <description>Make one Arduino Micro send a message &amp;quot;Hello world! Watchout!&amp;quot; and another Arduino Micro receive it using nrf24l01 modules Took me two whole days to get this thing up and running I used this library: nRF24/nRF24, documentation by tmrh20 Ignore the TB6612 breakout board     color pin pin color     brown miso irq nc   green sck mosi white   violet ce csn yellow   black gnd vcc red    Transmitter Code #include &amp;lt;SPI.</description>
    </item>
    
    <item>
      <title>ðŸŽ® Bossy: Initial Design</title>
      <link>https://mithi.github.io/robotics-blog/blog/bossy/03-initial-design/</link>
      <pubDate>Thu, 19 Mar 2020 03:39:01 +0800</pubDate>
      
      <guid>https://mithi.github.io/robotics-blog/blog/bossy/03-initial-design/</guid>
      <description> Breadboard, Schematic, pcb design  Version 2  I had to remove one button, one potentiometer, and the neopixel stick because of the protoboard&amp;rsquo;s constraints.          Version 1   Here&amp;rsquo;s my testing setup   Here&amp;rsquo;s my pathetic attempt to design the schematics. After several hours of pain, i decided to give up. lol
           Arduino Micro Pinouts  For future reference   </description>
    </item>
    
    <item>
      <title>ðŸŽ® Bossy: Bill of Materials</title>
      <link>https://mithi.github.io/robotics-blog/blog/bossy/02-bill-of-materials/</link>
      <pubDate>Mon, 16 Mar 2020 19:57:53 +0800</pubDate>
      
      <guid>https://mithi.github.io/robotics-blog/blog/bossy/02-bill-of-materials/</guid>
      <description>Items used
   # Item     1x Arduino Micro micro controller or similar   2x CD74HC4067 Mux Breakout like Sparkfun 16-channel Analog/Digital MUX Breakout - CD74HC4067   1x nrf24l01 breakout board   1x LED DOT MATRIX BL-M12X883 XX, HT16K33 driver like Adafruit Bicolor 8x8 LED Matrix with I2C backpack   4x 2-axis thumb joystick like Adafruit Thumb Joystick breakout board with select buttons   1x Mini breadboard   1x Capacitor 1500uF   5x Potentiometers (10k, 20k, 50k ohms work well)   12x Resistors 1/4 watt, (10kohms works well)   4x Momentary push buttons   2x PC401 proto board (14 cm x 10 cm)   2x On-On SPDT Switch   2x On-Off-On SPDT Switch   - Wires AWG - red, blue, etc   - Male and female pin headers   - Powerbank + USB cable   - Standoffs, screws, hex, and nuts for enclosure   - Lasercut acrylic for enclosure    I found some really cheap and affordable alternatives to Adafruit and Sparkfun breakout boards.</description>
    </item>
    
    <item>
      <title>ðŸŽ® Bossy: Task List</title>
      <link>https://mithi.github.io/robotics-blog/blog/bossy/01-task-list/</link>
      <pubDate>Mon, 16 Mar 2020 15:44:53 +0800</pubDate>
      
      <guid>https://mithi.github.io/robotics-blog/blog/bossy/01-task-list/</guid>
      <description>Objective: Build a a wireless custom general-purpose controller project  The custom controller&amp;rsquo;s name is Bossy Build a custom controller with parts I already have at home  Preliminaries  .List bill of materials .Install arduino .Install fritzing .Test if Arduino Micro is working .Make continuity tester with adafruit metro mini .Find out unique values of up, down and neutral for each joystick .Verify connectivity of switches, potentiometer, and momentary buttons .</description>
    </item>
    
  </channel>
</rss>